<div class="min-h-screen bg-gray-100 p-8">
   <div class="max-w-6xl mx-auto">
       <!-- 도서 검색 섹션 -->
       <h2 class="text-2xl font-bold mb-4">도서 검색</h2>
       <div class="bg-white rounded-lg shadow mb-8 p-6">
           <div class="flex gap-4 mb-4">
               <select id="searchType" class="p-2 border rounded">
                   <option value="title">도서명으로 검색</option>
                   <option value="author">작가명으로 검색</option>
                   <option value="award">수상명으로 검색</option>
               </select>
               <input type="text" id="searchKeyword" placeholder="검색어 입력" class="flex-1 p-2 border rounded">
               <button onclick="searchBooks()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                   검색
               </button>
           </div>
       </div>

       <!-- 검색 결과 섹션 -->
       <div class="bg-white rounded-lg shadow mb-8">
           <table class="min-w-full">
               <thead class="bg-gray-50">
                   <tr>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">도서명</th>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">작가</th>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">재고</th>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">관리</th>
                   </tr>
               </thead>
               <tbody id="searchResults"></tbody>
           </table>
       </div>

       <!-- 내 예약 현황 섹션 -->
       <h2 class="text-2xl font-bold mb-4">내 예약 현황</h2>
       <div class="bg-white rounded-lg shadow">
           <table class="min-w-full">
               <thead class="bg-gray-50">
                   <tr>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">도서명</th>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">픽업 시간</th>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">상태</th>
                       <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">관리</th>
                   </tr>
               </thead>
               <tbody id="myReservations"></tbody>
           </table>
       </div>
   </div>
</div>

<!-- 예약 모달 -->
<div id="reservationModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
   <div class="bg-white p-6 rounded-lg w-full max-w-md">
       <h2 class="text-xl font-semibold mb-4">도서 예약</h2>
       <input type="hidden" id="bookISBN">
       <div class="mb-4">
           <label class="block text-sm font-medium text-gray-700 mb-2">픽업 시간</label>
           <input type="datetime-local" id="pickupTime" class="w-full p-2 border rounded">
       </div>
       <div class="flex justify-end gap-4">
           <button onclick="closeReservationModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
               취소
           </button>
           <button onclick="makeReservation()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
               예약
           </button>
       </div>
   </div>
</div>

<!-- 수정 모달 -->
<div id="editModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
   <div class="bg-white p-6 rounded-lg w-full max-w-md">
       <h2 class="text-xl font-semibold mb-4">픽업 시간 수정</h2>
       <input type="hidden" id="editReservationId">
       <div class="mb-4">
           <label class="block text-sm font-medium text-gray-700 mb-2">새로운 픽업 시간</label>
           <input type="datetime-local" id="editPickupTime" class="w-full p-2 border rounded">
       </div>
       <div class="flex justify-end gap-4">
           <button onclick="closeEditModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
               취소
           </button>
           <button onclick="updateReservation()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
               수정
           </button>
       </div>
   </div>
</div>

<script>
// 도서 검색
async function searchBooks() {
   const searchType = document.getElementById('searchType').value;
   const keyword = document.getElementById('searchKeyword').value;

   if (!keyword) {
       alert('검색어를 입력해주세요.');
       return;
   }

   try {
       const response = await fetch(`/customer/reservation/search?type=${searchType}&keyword=${encodeURIComponent(keyword)}`);
       const data = await response.json();

       if (data.error) {
           alert(data.error);
           return;
       }

       displaySearchResults(data.books);
   } catch (err) {
       alert('검색 중 오류가 발생했습니다.');
   }
}

// 검색 결과 표시
function displaySearchResults(books) {
   const tbody = document.getElementById('searchResults');
   tbody.innerHTML = books.map(book => `
       <tr class="border-t">
           <td class="px-6 py-4">${book.title}</td>
           <td class="px-6 py-4">${book.author_name || '-'}</td>
           <td class="px-6 py-4">${book.total_stock}</td>
           <td class="px-6 py-4">
               ${book.total_stock > 0 
                   ? `<button onclick="openReservationModal('${book.ISBN}')" 
                          class="text-blue-500 hover:text-blue-700">예약</button>`
                   : '<span class="text-red-500">재고 없음</span>'
               }
           </td>
       </tr>
   `).join('');
}

// 예약 모달 관련 함수들
function openReservationModal(isbn) {
   document.getElementById('bookISBN').value = isbn;
   document.getElementById('reservationModal').classList.remove('hidden');
}

function closeReservationModal() {
   document.getElementById('reservationModal').classList.add('hidden');
   document.getElementById('pickupTime').value = '';
}

// 수정 모달 관련 함수들
function openEditModal(reservation) {
   document.getElementById('editReservationId').value = reservation.reservation_id;
   document.getElementById('editPickupTime').value = new Date(reservation.pickup_time).toISOString().slice(0, 16);
   document.getElementById('editModal').classList.remove('hidden');
}

function closeEditModal() {
   document.getElementById('editModal').classList.add('hidden');
   document.getElementById('editPickupTime').value = '';
}

async function makeReservation() {
   const isbn = document.getElementById('bookISBN').value;
   const pickupTime = document.getElementById('pickupTime').value;

   if (!pickupTime) {
       alert('픽업 시간을 선택해주세요.');
       return;
   }

   try {
       const response = await fetch('/customer/reservation/add', {
           method: 'POST',
           headers: {
               'Content-Type': 'application/json'
           },
           body: JSON.stringify({
               isbn,
               pickupTime
           })
       });

       const data = await response.json();

       if (data.error) {
           alert(data.error);
           return;
       }

       alert('예약이 완료되었습니다.');
       closeReservationModal();
       loadMyReservations();
   } catch (err) {
       alert('예약 중 오류가 발생했습니다.');
   }
}

async function updateReservation() {
   const id = document.getElementById('editReservationId').value;
   const pickupTime = document.getElementById('editPickupTime').value;

   if (!pickupTime) {
       alert('픽업 시간을 선택해주세요.');
       return;
   }

   try {
       const response = await fetch(`/customer/reservation/update/${id}`, {
           method: 'PUT',
           headers: {
               'Content-Type': 'application/json'
           },
           body: JSON.stringify({
               pickupTime
           })
       });

       const data = await response.json();

       if (data.error) {
           alert(data.error);
           return;
       }

       alert('예약이 수정되었습니다.');
       closeEditModal();
       loadMyReservations();
   } catch (err) {
       alert('예약 수정 중 오류가 발생했습니다.');
   }
}

// 내 예약 목록 로드
async function loadMyReservations() {
   try {
       const response = await fetch('/customer/reservation/my');
       const data = await response.json();

       if (data.error) {
           alert(data.error);
           return;
       }

       displayMyReservations(data.reservations);
   } catch (err) {
       alert('예약 목록 로드 중 오류가 발생했습니다.');
   }
}

// 예약 목록 표시
function displayMyReservations(reservations) {
   const tbody = document.getElementById('myReservations');
   tbody.innerHTML = reservations.map(res => `
       <tr class="border-t">
           <td class="px-6 py-4">${res.title}</td>
           <td class="px-6 py-4">${new Date(res.pickup_time).toLocaleString()}</td>
           <td class="px-6 py-4">예약 완료</td>
           <td class="px-6 py-4">
               <button onclick='openEditModal(${JSON.stringify(res)})' 
                       class="text-blue-500 hover:text-blue-700 mr-4">수정</button>
               <button onclick="cancelReservation(${res.reservation_id})" 
                       class="text-red-500 hover:text-red-700">취소</button>
           </td>
       </tr>
   `).join('');
}

// 예약 취소
async function cancelReservation(id) {
   if (!confirm('예약을 취소하시겠습니까?')) return;

   try {
       const response = await fetch(`/customer/reservation/${id}`, {
           method: 'DELETE'
       });
       const data = await response.json();

       if (data.error) {
           alert(data.error);
           return;
       }

       alert('예약이 취소되었습니다.');
       loadMyReservations();
   } catch (err) {
       alert('예약 취소 중 오류가 발생했습니다.');
   }
}

// 페이지 로드 시 예약 목록 불러오기
document.addEventListener('DOMContentLoaded', loadMyReservations);
</script>