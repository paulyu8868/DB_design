<div class="min-h-screen bg-gray-100 p-8">
   <div class="max-w-6xl mx-auto">
       <!-- 주문 추가 섹션 -->
       <div class="bg-white rounded-lg shadow mb-8 p-6">
           <h2 class="text-xl font-semibold mb-4">주문 추가</h2>
           <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
               <input type="text" id="newISBN" placeholder="도서 ISBN" class="p-2 border rounded" maxlength="13">
               <input type="number" id="newBasketId" placeholder="장바구니 ID" class="p-2 border rounded">
               <input type="number" id="newQuantity" placeholder="수량" class="p-2 border rounded">
               <button onclick="addOrder()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                   추가
               </button>
           </div>
       </div>

       <!-- 주문 검색 섹션 -->
       <div class="bg-white rounded-lg shadow mb-8 p-6">
           <div class="flex gap-4">
               <input type="text" id="searchBasketId" placeholder="장바구니 ID를 입력하세요" 
                      class="flex-1 p-2 border rounded">
               <button onclick="searchOrders()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                   검색
               </button>
           </div>
       </div>

       <!-- 검색 결과 테이블 -->
       <div class="bg-white rounded-lg shadow overflow-hidden">
           <table class="min-w-full">
               <thead class="bg-gray-50">
                   <tr>
                       <th class="px-6 py-3 text-left text-gray-500">도서 ISBN</th>
                       <th class="px-6 py-3 text-left text-gray-500">장바구니 ID</th>
                       <th class="px-6 py-3 text-left text-gray-500">수량</th>
                       <th class="px-6 py-3 text-left text-gray-500">관리</th>
                   </tr>
               </thead>
               <tbody id="searchResults"></tbody>
           </table>
       </div>
   </div>
</div>

<!-- 수정 모달 -->
<div id="editModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
   <div class="bg-white p-6 rounded-lg w-full max-w-md">
       <h2 class="text-xl font-semibold mb-4">주문 정보 수정</h2>
       <input type="hidden" id="editISBN">
       <input type="hidden" id="editBasketId">
       <div class="space-y-4">
           <div>
               <label class="block text-sm font-medium text-gray-700 mb-1">수량</label>
               <input type="number" id="editQuantity" class="w-full p-2 border rounded">
           </div>
       </div>
       <div class="flex justify-end gap-4 mt-6">
           <button onclick="closeEditModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
               취소
           </button>
           <button onclick="updateOrder()" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
               수정
           </button>
       </div>
   </div>
</div>

<script>
function addOrder() {
   const orderData = {
       Book_ISBN: document.getElementById('newISBN').value,
       Shopping_basket_basket_id: document.getElementById('newBasketId').value,
       quantity: document.getElementById('newQuantity').value
   };

   fetch('/admin/contains/add', {
       method: 'POST',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify(orderData)
   })
   .then(res => res.json())
   .then(data => {
       if (data.success) {
           alert('주문이 추가되었습니다.');
           clearAddForm();
       } else {
           alert(data.error);
       }
   })
   .catch(() => alert('서버와의 연결에 문제가 발생했습니다.'));
}

function searchOrders() {
   const searchBasketId = document.getElementById('searchBasketId').value;
   if (!searchBasketId) return alert('장바구니 ID를 입력해주세요.');

   fetch(`/admin/contains/search?basketId=${encodeURIComponent(searchBasketId)}`)
       .then(res => res.json())
       .then(data => {
           if (data.error) {
               alert(data.error);
               document.getElementById('searchResults').innerHTML = '';
               return;
           }
           displaySearchResults(data.orders);
       })
       .catch(() => {
           alert('검색 결과가 없습니다.');
           document.getElementById('searchResults').innerHTML = '';
       });
}

async function editOrder(order) {
    try {
        const response = await fetch(`/admin/contains/lock/${order.Book_ISBN}/${order.Shopping_basket_basket_id}`, {
            method: 'POST'
        });
        const data = await response.json();
        
        if (!data.success) {
            alert(data.error);
            return;
        }

        document.getElementById('editISBN').value = order.Book_ISBN;
        document.getElementById('editBasketId').value = order.Shopping_basket_basket_id;
        document.getElementById('editQuantity').value = order.quantity;
        document.getElementById('editModal').classList.remove('hidden');
    } catch (err) {
        alert('오류가 발생했습니다.');
    }
}

async function closeEditModal() {
    const isbn = document.getElementById('editISBN').value;
    const basketId = document.getElementById('editBasketId').value;
    await fetch(`/admin/contains/unlock/${isbn}/${basketId}`, {
        method: 'POST'
    });
    document.getElementById('editModal').classList.add('hidden');
}

function updateOrder() {
   const orderData = {
       Book_ISBN: document.getElementById('editISBN').value,
       Shopping_basket_basket_id: document.getElementById('editBasketId').value,
       quantity: document.getElementById('editQuantity').value
   };

   fetch('/admin/contains/update', {
       method: 'PUT',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify(orderData)
   })
   .then(res => res.json())
   .then(data => {
       if(data.success) {
           alert('수정되었습니다.');
           closeEditModal();
           searchOrders();
       }
   })
   .catch(() => alert('수정 중 오류가 발생했습니다.'));
}

function deleteOrder(ISBN, basketId) {
   if(!confirm('정말 삭제하시겠습니까?')) return;
   
   fetch(`/admin/contains/${ISBN}/${basketId}`, { method: 'DELETE' })
       .then(res => res.json())
       .then(data => {
           if(data.success) {
               searchOrders();
           }
       })
       .catch(() => alert('삭제 중 오류가 발생했습니다.'));
}



function clearAddForm() {
   ['ISBN', 'BasketId', 'Quantity'].forEach(field => {
       document.getElementById('new' + field).value = '';
   });
}

function displaySearchResults(orders) {
   document.getElementById('searchResults').innerHTML = orders.map(order => `
       <tr class="border-t">
           <td class="px-6 py-4">${order.Book_ISBN}</td>
           <td class="px-6 py-4">${order.Shopping_basket_basket_id}</td>
           <td class="px-6 py-4">${order.quantity}</td>
           <td class="px-6 py-4">
               <button onclick='editOrder(${JSON.stringify(order)})' 
                       class="text-blue-500 hover:text-blue-700 mr-4">수정</button>
               <button onclick='deleteOrder("${order.Book_ISBN}", "${order.Shopping_basket_basket_id}")' 
                       class="text-red-500 hover:text-red-700">삭제</button>
           </td>
       </tr>
   `).join('');
}
</script>